// planner.go - Token budget planning and allocation service

package tokens

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"github.com/IAM-timmy1t/Quant_WebWork_GO/internal/security/risk"
)

// Common errors
var (
	ErrInvalidBudget      = errors.New("invalid token budget")
	ErrBudgetExceeded     = errors.New("token budget exceeded")
	ErrModelNotSupported  = errors.New("model not supported")
	ErrInvalidAllocation  = errors.New("invalid token allocation")
	ErrModuleNotRegistered = errors.New("module not registered")
)

// AllocationStrategy determines how tokens are allocated
type AllocationStrategy string

// Allocation strategies
const (
	// FixedAllocation allocates a fixed number of tokens to each module
	FixedAllocation AllocationStrategy = "fixed"
	
	// ProportionalAllocation allocates tokens based on ratios
	ProportionalAllocation AllocationStrategy = "proportional"
	
	// PriorityAllocation allocates tokens based on module priorities
	PriorityAllocation AllocationStrategy = "priority"
	
	// DynamicAllocation adjusts allocations based on runtime needs
	DynamicAllocation AllocationStrategy = "dynamic"
)

// ModuleConstraint defines token constraints for a module
type ModuleConstraint struct {
	MinTokens      int     // Minimum tokens required
	MaxTokens      int     // Maximum tokens allowed
	IdealTokens    int     // Ideal token allocation
	Priority       float64 // Priority level (0.0-1.0)
	ScalingFactor  float64 // How module scales with available tokens (0.0-1.0)
}

// TokenBudget defines token budget for a model
type TokenBudget struct {
	ModelID           string  // Model identifier
	TotalTokens       int     // Total available tokens
	InputRatio        float64 // Ratio of input tokens (0.0-1.0)
	OutputRatio       float64 // Ratio of output tokens (0.0-1.0)
	ReservedTokens    int     // Tokens reserved for system use
	EmergencyReserve  int     // Emergency token reserve
	WarningThreshold  float64 // Warning threshold (0.0-1.0)
}

// ModuleAllocation represents token allocation for a module
type ModuleAllocation struct {
	ModuleName       string    // Module name
	ModelID          string    // Model identifier
	AllocatedTokens  int       // Allocated tokens
	UsedTokens       int       // Tokens used
	LastUpdated      time.Time // Last update timestamp
	EstimatedCost    float64   // Estimated token cost
}

// AllocationRequest represents a token allocation request
type AllocationRequest struct {
	ModuleName     string                 // Module name
	ModelID        string                 // Model identifier
	RequestedTokens int                   // Requested token count
	Purpose        string                 // Purpose of allocation
	Metadata       map[string]interface{} // Additional metadata
}

// TokenUsageReport represents token usage statistics
type TokenUsageReport struct {
	ModuleReports  map[string]ModuleUsageReport // Reports by module
	ModelsUsage    map[string]ModelUsageReport  // Usage by model
	TotalAllocated int                          // Total tokens allocated
	TotalUsed      int                          // Total tokens used
	UtilizationRate float64                     // Utilization rate (0.0-1.0)
	GeneratedAt    time.Time                    // Report generation time
}

// ModuleUsageReport represents token usage for a module
type ModuleUsageReport struct {
	ModuleName      string             // Module name
	AllocatedTokens int                // Allocated tokens
	UsedTokens      int                // Tokens used
	UtilizationRate float64            // Utilization rate (0.0-1.0)
	ModelBreakdown  map[string]int     // Usage breakdown by model
	HistoricalUsage []HistoricalUsage  // Historical usage
}

// ModelUsageReport represents token usage for a model
type ModelUsageReport struct {
	ModelID         string             // Model identifier
	TotalAllocated  int                // Total tokens allocated
	TotalUsed       int                // Total tokens used
	UtilizationRate float64            // Utilization rate (0.0-1.0)
	InputTokens     int                // Input tokens used
	OutputTokens    int                // Output tokens used
	EstimatedCost   float64            // Estimated cost
}

// HistoricalUsage represents historical token usage
type HistoricalUsage struct {
	Timestamp  time.Time // Usage timestamp
	UsedTokens int       // Tokens used
}

// PlannerConfig contains configuration for the token planner
type PlannerConfig struct {
	DefaultStrategy   AllocationStrategy      // Default allocation strategy
	DefaultModel      string                  // Default model identifier
	ModelBudgets      map[string]TokenBudget  // Budgets by model
	GlobalConstraints map[string]float64      // Global constraints
	EnableReporting   bool                    // Whether to enable reporting
	ReportInterval    time.Duration           // Interval for generating reports
	EnableOptimization bool                   // Whether to enable optimization
	AnalysisThreshold float64                 // Threshold for triggering analysis
}

// Planner manages token budgets and allocations
type Planner struct {
	config            PlannerConfig                // Planner configuration
	moduleConstraints map[string]ModuleConstraint  // Constraints by module
	allocations       map[string][]ModuleAllocation // Allocations by module
	modelProfiles     map[string]risk.ModelProfile // Model profiles
	mutex             sync.RWMutex                 // Mutex for thread safety
	analyzer          *risk.TokenAnalyzer          // Token analyzer
	reportChan        chan TokenUsageReport        // Channel for usage reports
	stopChan          chan struct{}                // Channel for stopping background tasks
}

// NewPlanner creates a new token planner
func NewPlanner(config PlannerConfig, analyzer *risk.TokenAnalyzer) *Planner {
	if analyzer == nil {
		analyzer = risk.NewTokenAnalyzer(nil)
	}

	planner := &Planner{
		config:            config,
		moduleConstraints: make(map[string]ModuleConstraint),
		allocations:       make(map[string][]ModuleAllocation),
		modelProfiles:     make(map[string]risk.ModelProfile),
		analyzer:          analyzer,
		reportChan:        make(chan TokenUsageReport, 10),
		stopChan:          make(chan struct{}),
	}

	// Load model profiles from analyzer
	for _, profile := range analyzer.GetModelProfiles() {
		planner.modelProfiles[profile.ID] = profile
	}

	// Start background tasks if reporting is enabled
	if config.EnableReporting && config.ReportInterval > 0 {
		go planner.reportingTask()
	}

	return planner
}

// RegisterModule registers a module with constraints
func (p *Planner) RegisterModule(moduleName string, constraint ModuleConstraint) error {
	p.mutex.Lock()
	defer p.mutex.Unlock()

	// Validate constraints
	if constraint.MinTokens < 0 || constraint.MaxTokens < constraint.MinTokens {
		return ErrInvalidAllocation
	}

	// Initialize module allocations
	p.moduleConstraints[moduleName] = constraint
	p.allocations[moduleName] = []ModuleAllocation{}

	return nil
}

// AllocateTokens allocates tokens for a module
func (p *Planner) AllocateTokens(ctx context.Context, req AllocationRequest) (*ModuleAllocation, error) {
	p.mutex.Lock()
	defer p.mutex.Unlock()

	// Use default model if not specified
	modelID := req.ModelID
	if modelID == "" {
		modelID = p.config.DefaultModel
	}

	// Check if module is registered
	constraint, exists := p.moduleConstraints[req.ModuleName]
	if !exists {
		return nil, ErrModuleNotRegistered
	}

	// Check if model is supported
	budget, exists := p.config.ModelBudgets[modelID]
	if !exists {
		return nil, ErrModelNotSupported
	}

	// Validate requested tokens
	if req.RequestedTokens <= 0 {
		return nil, ErrInvalidAllocation
	}

	// Apply module constraints
	allocatedTokens := req.RequestedTokens
	if allocatedTokens > constraint.MaxTokens {
		allocatedTokens = constraint.MaxTokens
	}
	if allocatedTokens < constraint.MinTokens {
		allocatedTokens = constraint.MinTokens
	}

	// Check if budget is exceeded
	currentlyAllocated := p.getTotalAllocatedForModel(modelID)
	if currentlyAllocated+allocatedTokens > budget.TotalTokens-budget.ReservedTokens {
		// Try to optimize allocations if enabled
		if p.config.EnableOptimization {
			if p.optimizeAllocations(modelID, allocatedTokens) {
				// Recalculate after optimization
				currentlyAllocated = p.getTotalAllocatedForModel(modelID)
			}
		}

		// Check again after optimization
		if currentlyAllocated+allocatedTokens > budget.TotalTokens-budget.ReservedTokens {
			return nil, ErrBudgetExceeded
		}
	}

	// Calculate estimated cost
	estimatedCost := 0.0
	if profile, exists := p.modelProfiles[modelID]; exists {
		estimatedCost = float64(allocatedTokens) * profile.TokenCostWeighting
	}

	// Create allocation
	allocation := &ModuleAllocation{
		ModuleName:      req.ModuleName,
		ModelID:         modelID,
		AllocatedTokens: allocatedTokens,
		UsedTokens:      0,
		LastUpdated:     time.Now(),
		EstimatedCost:   estimatedCost,
	}

	// Add to allocations
	p.allocations[req.ModuleName] = append(p.allocations[req.ModuleName], *allocation)

	// Check warning threshold
	warningThreshold := budget.WarningThreshold
	if warningThreshold > 0 {
		usageRatio := float64(currentlyAllocated+allocatedTokens) / float64(budget.TotalTokens)
		if usageRatio >= warningThreshold {
			// Log warning but still allow allocation
			// This would usually call a logger, but for simplicity we'll just include the warning in the returned allocation
			// via a metadata field we'll add to our return value
		}
	}

	return allocation, nil
}

// ReleaseTokens releases tokens for a module
func (p *Planner) ReleaseTokens(moduleName, modelID string, tokensUsed int) error {
	p.mutex.Lock()
	defer p.mutex.Unlock()

	moduleAllocations, exists := p.allocations[moduleName]
	if !exists {
		return ErrModuleNotRegistered
	}

	// Find matching allocation
	for i, allocation := range moduleAllocations {
		if allocation.ModelID == modelID {
			// Update used tokens
			moduleAllocations[i].UsedTokens = tokensUsed
			moduleAllocations[i].LastUpdated = time.Now()

			// Remove allocation from active list
			p.allocations[moduleName] = append(moduleAllocations[:i], moduleAllocations[i+1:]...)
			return nil
		}
	}

	return fmt.Errorf("no allocation found for module %s with model %s", moduleName, modelID)
}

// GetTokenBudget returns the token budget for a model
func (p *Planner) GetTokenBudget(modelID string) (TokenBudget, error) {
	p.mutex.RLock()
	defer p.mutex.RUnlock()

	budget, exists := p.config.ModelBudgets[modelID]
	if !exists {
		return TokenBudget{}, ErrModelNotSupported
	}

	return budget, nil
}

// GenerateUsageReport generates a token usage report
func (p *Planner) GenerateUsageReport() TokenUsageReport {
	p.mutex.RLock()
	defer p.mutex.RUnlock()

	report := TokenUsageReport{
		ModuleReports: make(map[string]ModuleUsageReport),
		ModelsUsage:   make(map[string]ModelUsageReport),
		GeneratedAt:   time.Now(),
	}

	totalAllocated := 0
	totalUsed := 0

	// Initialize model usage
	for modelID := range p.config.ModelBudgets {
		report.ModelsUsage[modelID] = ModelUsageReport{
			ModelID: modelID,
		}
	}

	// Process allocations
	for moduleName, moduleAllocations := range p.allocations {
		moduleReport := ModuleUsageReport{
			ModuleName:     moduleName,
			ModelBreakdown: make(map[string]int),
			HistoricalUsage: []HistoricalUsage{},
		}

		for _, allocation := range moduleAllocations {
			// Update module report
			moduleReport.AllocatedTokens += allocation.AllocatedTokens
			moduleReport.UsedTokens += allocation.UsedTokens
			moduleReport.ModelBreakdown[allocation.ModelID] += allocation.UsedTokens

			// Update model report
			modelReport := report.ModelsUsage[allocation.ModelID]
			modelReport.TotalAllocated += allocation.AllocatedTokens
			modelReport.TotalUsed += allocation.UsedTokens
			modelReport.EstimatedCost += allocation.EstimatedCost
			report.ModelsUsage[allocation.ModelID] = modelReport

			// Add historical usage
			moduleReport.HistoricalUsage = append(moduleReport.HistoricalUsage, HistoricalUsage{
				Timestamp:  allocation.LastUpdated,
				UsedTokens: allocation.UsedTokens,
			})

			// Update totals
			totalAllocated += allocation.AllocatedTokens
			totalUsed += allocation.UsedTokens
		}

		// Calculate utilization rate
		if moduleReport.AllocatedTokens > 0 {
			moduleReport.UtilizationRate = float64(moduleReport.UsedTokens) / float64(moduleReport.AllocatedTokens)
		}

		report.ModuleReports[moduleName] = moduleReport
	}

	// Calculate model utilization rates
	for modelID, modelReport := range report.ModelsUsage {
		if modelReport.TotalAllocated > 0 {
			modelReport.UtilizationRate = float64(modelReport.TotalUsed) / float64(modelReport.TotalAllocated)
			report.ModelsUsage[modelID] = modelReport
		}
	}

	// Calculate overall utilization rate
	if totalAllocated > 0 {
		report.UtilizationRate = float64(totalUsed) / float64(totalAllocated)
	}

	report.TotalAllocated = totalAllocated
	report.TotalUsed = totalUsed

	return report
}

// AnalyzeUsage analyzes token usage and provides recommendations
func (p *Planner) AnalyzeUsage(ctx context.Context, modelID string) (*risk.AnalyzerResult, error) {
	p.mutex.RLock()
	defer p.mutex.RUnlock()

	// Use default model if not specified
	if modelID == "" {
		modelID = p.config.DefaultModel
	}

	// Check if model is supported
	budget, exists := p.config.ModelBudgets[modelID]
	if !exists {
		return nil, ErrModelNotSupported
	}

	// Get current usage
	totalAllocated := p.getTotalAllocatedForModel(modelID)
	
	// Calculate utilization
	utilizationRate := 0.0
	if budget.TotalTokens > 0 {
		utilizationRate = float64(totalAllocated) / float64(budget.TotalTokens)
	}

	// Prepare data for analysis
	target := map[string]interface{}{
		"model":           modelID,
		"input_tokens":    int(float64(totalAllocated) * budget.InputRatio),
		"output_tokens":   int(float64(totalAllocated) * budget.OutputRatio),
		"total_tokens":    totalAllocated,
		"budget_tokens":   budget.TotalTokens,
		"utilization_rate": utilizationRate,
	}

	// Analysis options
	options := map[string]interface{}{
		"detailed_analysis":      true,
		"include_recommendations": true,
		"include_model_details":   true,
	}

	// Perform analysis
	return p.analyzer.Analyze(ctx, target, options)
}

// OptimizeTokenAllocations optimizes token allocations across modules
func (p *Planner) OptimizeTokenAllocations(ctx context.Context, modelID string) (bool, error) {
	return p.optimizeAllocations(modelID, 0), nil
}

// GetSubscriptionChannel returns a channel for receiving usage reports
func (p *Planner) GetSubscriptionChannel() <-chan TokenUsageReport {
	return p.reportChan
}

// Close stops all background tasks and releases resources
func (p *Planner) Close() {
	close(p.stopChan)
}

// getTotalAllocatedForModel returns the total tokens allocated for a model
func (p *Planner) getTotalAllocatedForModel(modelID string) int {
	total := 0
	for _, moduleAllocations := range p.allocations {
		for _, allocation := range moduleAllocations {
			if allocation.ModelID == modelID {
				total += allocation.AllocatedTokens
			}
		}
	}
	return total
}

// optimizeAllocations attempts to optimize allocations to free up tokens
// Returns true if optimization was successful in freeing up tokens
func (p *Planner) optimizeAllocations(modelID string, requiredTokens int) bool {
	// This is a placeholder for a more sophisticated optimization algorithm
	// In a real implementation, this would use various strategies to free up tokens
	// such as reclaiming unused allocations, reducing allocations based on priorities, etc.
	
	// For now, we'll just implement a simple strategy that releases allocations
	// that haven't been updated in a while
	
	freed := 0
	now := time.Now()
	staleThreshold := 5 * time.Minute
	
	for moduleName, moduleAllocations := range p.allocations {
		for i, allocation := range moduleAllocations {
			if allocation.ModelID == modelID && now.Sub(allocation.LastUpdated) > staleThreshold {
				// Remove stale allocation
				p.allocations[moduleName] = append(moduleAllocations[:i], moduleAllocations[i+1:]...)
				freed += allocation.AllocatedTokens
				
				if freed >= requiredTokens {
					return true
				}
			}
		}
	}
	
	return freed >= requiredTokens
}

// reportingTask generates periodic usage reports
func (p *Planner) reportingTask() {
	ticker := time.NewTicker(p.config.ReportInterval)
	defer ticker.Stop()
	
	for {
		select {
		case <-ticker.C:
			report := p.GenerateUsageReport()
			
			// Send report to channel (non-blocking)
			select {
			case p.reportChan <- report:
				// Report sent successfully
			default:
				// Channel buffer is full, skip this report
			}
			
		case <-p.stopChan:
			return
		}
	}
}

